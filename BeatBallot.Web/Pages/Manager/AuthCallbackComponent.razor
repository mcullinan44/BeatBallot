@* Pages/AuthCallback.razor *@
@page "/authcallback"
@using BeatBallot.Services
@using SpotifyAPI.Web
@using ISpotifyAuthService = BeatBallot.Web.Services.ISpotifyAuthService

@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<div class="callback-container">
    @if (isProcessing)
    {
        <div class="processing-auth">
            <div class="loading-spinner"></div>
            <h2>Completing Spotify Authentication...</h2>
            <p>Please wait while we set up your account.</p>
        </div>
    }
    else if (hasError)
    {
        <div class="auth-error">
            <div class="error-icon">❌</div>
            <h2>Authentication Failed</h2>
            <p>@errorMessage</p>
            <button class="retry-btn" @onclick="RetryAuth">Try Again</button>
        </div>
    }
</div>

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "code")]
    public string? Code { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "state")]
    public string? State { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "error")]
    public string? Error { get; set; }

    private bool isProcessing = true;
    private bool hasError = false;
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await ProcessCallback();
    }

    private async Task ProcessCallback()
    {
        try
        {
            // Check for error parameter first
            if (!string.IsNullOrEmpty(Error))
            {
                ShowError($"Spotify authentication failed: {Error}");
                return;
            }

            // Validate required parameters
            if (string.IsNullOrEmpty(Code) || string.IsNullOrEmpty(State))
            {
                ShowError("Invalid callback parameters received from Spotify.");
                return;
            }

            // TODO: Validate state parameter for security
            // var storedState = await SpotifyAuth.GetStoredStateAsync();
            // if (State != storedState)
            // {
            //     ShowError("Invalid state parameter. Possible security issue.");
            //     return;
            // }

            // Exchange code for access token
            await ExchangeCodeForToken();
        }
        catch (Exception ex)
        {
            ShowError($"An error occurred during authentication: {ex.Message}");
        }
    }

    private async Task ExchangeCodeForToken()
    {
        try
        {
            var config = SpotifyClientConfig.CreateDefault();
            var request = new AuthorizationCodeTokenRequest(
                Configuration["Spotify:ClientId"] ?? string.Empty,
                Configuration["Spotify:ClientSecret"] ?? string.Empty,
                Code!,
                new Uri(Configuration["BaseUrl"] + "/authcallback")
            );

            var response = await new OAuthClient(config).RequestToken(request);

            // Store tokens
            await localStorage.SetItemAsync("sat", response.AccessToken);
            await localStorage.SetItemAsync("satexp", response.ExpiresIn);
            await localStorage.SetItemAsync("satcr", response.CreatedAt);

            if (!string.IsNullOrEmpty(response.RefreshToken))
            {
                await localStorage.SetItemAsync("srt", response.RefreshToken);
            }

            // Redirect to DJ dashboard
            NavigationManager.NavigateTo("/", forceLoad: true);
        }
        catch (Exception ex)
        {
            if (ex.Message.Contains("invalid_grant"))
            {
                ShowError("The authorization code has expired. Please try logging in again.");
            }
            else
            {
                ShowError($"Failed to exchange authorization code: {ex.Message}");
            }
        }
    }

    private void ShowError(string message)
    {
        errorMessage = message;
        hasError = true;
        isProcessing = false;
        StateHasChanged();
    }

    private void RetryAuth()
    {
        NavigationManager.NavigateTo("/login", forceLoad: true);
    }
}

<style>
    .callback-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        background: linear-gradient(135deg, #2c3e50 0%, #34495e 50%, #2c3e50 100%);
        padding: 20px;
    }

    .processing-auth, .auth-error {
        background: rgba(0, 0, 0, 0.4);
        backdrop-filter: blur(20px);
        border-radius: 20px;
        border: 1px solid rgba(255, 255, 255, 0.1);
        padding: 40px;
        text-align: center;
        color: white;
        max-width: 400px;
        width: 100%;
    }

    .loading-spinner {
        width: 50px;
        height: 50px;
        border: 4px solid rgba(255,255,255,0.3);
        border-top: 4px solid #f39c12;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin: 0 auto 20px auto;
    }

    .error-icon {
        font-size: 3em;
        margin-bottom: 20px;
    }

    .retry-btn {
        background: linear-gradient(45deg, #e74c3c, #f39c12);
        border: none;
        border-radius: 12px;
        padding: 15px 25px;
        color: white;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.3s ease;
        margin-top: 20px;
    }

        .retry-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(231,76,60,0.4);
        }


</style>