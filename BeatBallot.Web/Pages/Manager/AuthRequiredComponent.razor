@using BeatBallot.Services
@using ISpotifyAuthService = BeatBallot.Web.Services.ISpotifyAuthService
@* Components/AuthRequired.razor *@
@inject ISpotifyAuthService SpotifyAuth
@inject NavigationManager Navigation

@if (isLoading)
{
    <div class="auth-loading">
        <div class="loading-spinner"></div>
        <p>Checking authentication...</p>
    </div>
}
else if (isAuthenticated)
{
    @ChildContent
}
else
{
    <!-- This will never show because we redirect, but kept for safety -->
    <div class="auth-required">
        <p>Authentication required. Redirecting to login...</p>
    </div>
}

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }

    private bool isLoading = true;
    private bool isAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        await CheckAuthentication();
    }

    private async Task CheckAuthentication()
    {
        try
        {
            isAuthenticated = await SpotifyAuth.IsAuthenticatedAsync();

            if (!isAuthenticated)
            {
                // Redirect to login page
                Navigation.NavigateTo("/login", forceLoad: true);
                return;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Authentication check failed: {ex.Message}");
            Navigation.NavigateTo("/login", forceLoad: true);
            return;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}

<style>
    .auth-loading {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        min-height: 50vh;
        color: white;
        text-align: center;
    }

    .loading-spinner {
        width: 40px;
        height: 40px;
        border: 3px solid rgba(255,255,255,0.3);
        border-top: 3px solid #f39c12;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin-bottom: 20px;
    }

@*     @keyframes spin {
        0%

    {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }

    } *@

    .auth-required {
        display: flex;
        align-items: center;
        justify-content: center;
        min-height: 50vh;
        color: white;
        text-align: center;
    }
</style>